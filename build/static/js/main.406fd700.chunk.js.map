{"version":3,"sources":["Info/Info.js","App.js","serviceWorker.js","index.js"],"names":["Info","props","handleUsername","event","setState","username","target","value","handleEmail","email","handleSubmit","alert","state","preventDefault","handlePassword","password","onSubmit","this","TextField","label","id","variant","size","onChange","required","type","autoComplete","Button","color","Component","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.406fd700.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { Button } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\n\nclass Info extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tusername: '',\n\t\t\temail: '',\n\t\t\tpassword: '',\n\t\t}\n\t}\n\thandleUsername = event => {\n\t\tthis.setState({\n\t\t\tusername: event.target.value\n\t\t})\n\t}\n\n\thandleEmail = event => {\n\t\tthis.setState({\n\t\t\temail: event.target.value\n\t\t})\n\t}\n\thandleSubmit = event => {\n\t\talert(` username :  ${this.state.username} Email :  ${this.state.email} `)\n\t\tevent.preventDefault()\n\t}\n\thandlePassword = event => {\n\t\tthis.setState({\n\t\t\tpassword: event.target.value\n\t\t})\n\t}\n\trender() {\n\n\t\treturn (\n\t\t\t<form onSubmit={this.handleSubmit} >\n\t\t\t\t<br></br>\n\t\t\t\t<TextField\n\t\t\t\t\tlabel=\"User Name\"\n\t\t\t\t\tid=\"outlined-size-small\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tsize=\"small\"\n\t\t\t\t\tvalue={this.state.username}\n\t\t\t\t\tonChange={this.handleUsername}\n\t\t\t\t/>\n\t\t\t\t<br /><br />\n\t\t\t\t<TextField\n\t\t\t\t\trequired\n\t\t\t\t\tid=\"outlined-required\"\n\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tsize=\"small\"\n\t\t\t\t\tvalue={this.state.email}\n\t\t\t\t\tonChange={this.handleEmail}\n\t\t\t\t/>\n\t\t\t\t<br /><br />\n\t\t\t\t<TextField\n\t\t\t\t\tid=\"outlined-password-input\"\n\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\tautoComplete=\"current-password\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tsize=\"small\"\n\t\t\t\t\tvalue={this.state.password}\n\t\t\t\t\tonChange={this.handlePassword}\n\t\t\t\t/>\n\t\t\t\t<br/><br/>\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" type=\"submit\">Login</Button>\n\t\t\t</form>\n\n\n\t\t)\n\t}\n}\n\nexport default Info","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Info from './Info/Info';\n//import Welcome from './Welcome/Welcome';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h3>Hello !! Enter your details please</h3>\n    <Info/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}